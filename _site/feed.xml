<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2023-04-15T13:19:04-05:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Richard’s World!</title><author><name>Richard Van</name></author><entry><title type="html">Bash Ls</title><link href="http://localhost:4000/2023/01/bash-ls.html" rel="alternate" type="text/html" title="Bash Ls" /><published>2023-01-02T00:00:00-06:00</published><updated>2023-01-02T00:00:00-06:00</updated><id>http://localhost:4000/2023/01/bash-ls</id><content type="html" xml:base="http://localhost:4000/2023/01/bash-ls.html"><![CDATA[<h2 id="ls">ls</h2>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -d 
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -lt
</code></pre></div></div>]]></content><author><name>Richard Van</name></author><category term="bash" /></entry><entry><title type="html">Bash</title><link href="http://localhost:4000/2023/01/bash.html" rel="alternate" type="text/html" title="Bash" /><published>2023-01-01T00:00:00-06:00</published><updated>2023-01-01T00:00:00-06:00</updated><id>http://localhost:4000/2023/01/bash</id><content type="html" xml:base="http://localhost:4000/2023/01/bash.html"><![CDATA[<p>First line of the script is the shebang which tells the system how to execute the script: https://en.wikipedia.org/wiki/Shebang_(Unix)
As you already figured, comments start with #. Shebang is also a comment.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash
</code></pre></div></div>

<p>Simple hello world example:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "Hello world!" # =&gt; Hello world!
</code></pre></div></div>

<p>Each command starts on a new line, or after a semicolon:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "This is the first command"; echo "This is the second command"
=&gt; This is the first command
=&gt; This is the second command
</code></pre></div></div>

<p>Declaring a variable looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>variable="Some string"
</code></pre></div></div>

<p>But not like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>variable = "Some string" # =&gt; returns error "variable: command not found"
</code></pre></div></div>

<p>Bash will decide that <code class="language-plaintext highlighter-rouge">variable</code> is a command it must execute and give an error because it can’t be found.</p>

<p>Nor like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>variable= "Some string" # =&gt; returns error: "Some string: command not found"
</code></pre></div></div>

<p>Bash will decide that “Some string” is a command it must execute and give an
error because it can’t be found. In this case the “variable=” part is seen
as a variable assignment valid only for the scope of the “Some string”
command.</p>

<p>Using the variable:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "$variable" =&gt; Some string
echo '$variable' =&gt; $variable
</code></pre></div></div>

<p>When you use a variable itself — assign it, export it, or else — you write
its name without $. If you want to use the variable’s value, you should use $.
Note that ‘ (single quote) won’t expand the variables!
You can write variable without surrounding quotes but it’s not recommended.</p>

<p>Parameter expansion ${…}:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${variable}" =&gt; Some string
</code></pre></div></div>

<p>This is a simple usage of parameter expansion such as two examples above.
Parameter expansion gets a value from a variable.
It “expands” or prints the value.
During the expansion time the value or parameter can be modified.
Below are other modifications that add onto this expansion.</p>

<p>String substitution in variables:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${variable/Some/A}" =&gt; A string
</code></pre></div></div>

<p>This will substitute the first occurrence of “Some” with “A”.</p>

<p>Substring from a variable:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>length=7
echo "${variable:0:length}" =&gt; Some st
</code></pre></div></div>

<p>This will return only the first 7 characters of the value</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${variable: -5}" # =&gt; tring
</code></pre></div></div>

<p>This will return the last 5 characters (note the space before -5).
The space before minus is mandatory here.</p>

<p>String length:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${#variable}" # =&gt; 11
</code></pre></div></div>

<p>Indirect expansion:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>other_variable="variable"
echo ${!other_variable} # =&gt; Some string
</code></pre></div></div>

<p>This will expand the value of <code class="language-plaintext highlighter-rouge">other_variable</code>.</p>

<p>The default value for variable:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${foo:-"DefaultValueIfFooIsMissingOrEmpty"}"
</code></pre></div></div>

<p>=&gt; DefaultValueIfFooIsMissingOrEmpty
This works for null (foo=) and empty string (foo=””); zero (foo=0) returns 0.
Note that it only returns default value and doesn’t change variable value.</p>

<p>Declare an array with 6 elements:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>array=(one two three four five six)
</code></pre></div></div>

<p>Print the first element:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${array[0]}" # =&gt; "one"
</code></pre></div></div>

<p>Print all elements:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${array[@]}" # =&gt; "one two three four five six"
</code></pre></div></div>

<p>Print the number of elements:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${#array[@]}" # =&gt; "6"
</code></pre></div></div>

<p>Print the number of characters in third element</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${#array[2]}" # =&gt; "5"
</code></pre></div></div>
<p>Print 2 elements starting from fourth:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "${array[@]:3:2}" # =&gt; "four five"
</code></pre></div></div>
<p>Print all elements each of them on new line.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for item in "${array[@]}"; do
    echo "$item"
done
</code></pre></div></div>

<p>Built-in variables:
There are some useful built-in variables, like:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "Last program's return value: $?"
echo "Script's PID: $$"
echo "Number of arguments passed to script: $#"
echo "All arguments passed to script: $@"
echo "Script's arguments separated into different variables: $1 $2..."
</code></pre></div></div>

<p>Brace Expansion {…}
used to generate arbitrary strings:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo {1..10} # =&gt; 1 2 3 4 5 6 7 8 9 10
echo {a..z} # =&gt; a b c d e f g h i j k l m n o p q r s t u v w x y z
</code></pre></div></div>

<p>This will output the range from the start value to the end value.
Note that you can’t use variables here:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>from=1
to=10
echo {$from..$to} # =&gt; {$from..$to}
</code></pre></div></div>

<p>Now that we know how to echo and use variables,
let’s learn some of the other basics of Bash!</p>

<p>Our current directory is available through the command <code class="language-plaintext highlighter-rouge">pwd</code>.
<code class="language-plaintext highlighter-rouge">pwd</code> stands for “print working directory”.
We can also use the built-in variable <code class="language-plaintext highlighter-rouge">$PWD</code>.
Observe that the following are equivalent:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "I'm in $(pwd)" # execs `pwd` and interpolates output
echo "I'm in $PWD" # interpolates the variable
</code></pre></div></div>

<p>If you get too much output in your terminal, or from a script, the command
<code class="language-plaintext highlighter-rouge">clear</code> clears your screen:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>clear
</code></pre></div></div>
<p>Ctrl-L also works for clearing output.</p>

<p>Reading a value from input:
echo “What’s your name?”
read name
Note that we didn’t need to declare a new variable.
echo “Hello, $name!”</p>

<p>We have the usual if structure.
Condition is true if the value of $name is not equal to the current user’s login username:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>if [[ "$name" != "$USER" ]]; then
    echo "Your name isn't your username"
else
    echo "Your name is your username"
fi
</code></pre></div></div>

<table>
  <tbody>
    <tr>
      <td>To use &amp;&amp; and</td>
      <td> </td>
      <td>with if statements, you need multiple pairs of square brackets:</td>
    </tr>
  </tbody>
</table>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>read age
if [[ "$name" == "Steve" ]] &amp;&amp; [[ "$age" -eq 15 ]]; then
    echo "This will run if $name is Steve AND $age is 15."
fi

if [[ "$name" == "Daniya" ]] || [[ "$name" == "Zach" ]]; then
    echo "This will run if $name is Daniya OR Zach."
fi
</code></pre></div></div>

<p>There are other comparison operators for numbers listed below:
-ne - not equal
-lt - less than
-gt - greater than
-le - less than or equal to
-ge - greater than or equal to</p>

<p>There is also the <code class="language-plaintext highlighter-rouge">=~</code> operator, which tests a string against the Regex pattern:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>email=me@example.com
if [[ "$email" =~ [a-z]+@[a-z]{2,}\.(com|net|org) ]]
then
    echo "Valid email!"
fi
</code></pre></div></div>

<p>There is also conditional execution</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "Always executed" || echo "Only executed if first command fails"
</code></pre></div></div>

<p>=&gt; Always executed</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo "Always executed" &amp;&amp; echo "Only executed if first command does NOT fail"
</code></pre></div></div>

<p>=&gt; Always executed
=&gt; Only executed if first command does NOT fail</p>

<p>A single ampersand &amp; after a command runs it in the background. A background command’s
output is printed to the terminal, but it cannot read from the input.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sleep 30 &amp;
</code></pre></div></div>

<p>List background jobs</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>jobs # =&gt; [1]+  Running                 sleep 30 &amp;
</code></pre></div></div>

<p>Bring the background job to the foreground</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>fg
</code></pre></div></div>

<p>Ctrl-C to kill the process, or Ctrl-Z to pause it
Resume a background process after it has been paused with Ctrl-Z</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bg
</code></pre></div></div>

<p>Kill job number 2</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>kill %2
</code></pre></div></div>

<p>%1, %2, etc. can be used for fg and bg as well</p>

<p>Redefine command <code class="language-plaintext highlighter-rouge">ping</code> as alias to send only 5 packets</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alias ping='ping -c 5'
</code></pre></div></div>

<p>Escape the alias and use command with this name instead</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>\ping 192.168.1.1
</code></pre></div></div>

<p>Print all aliases</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>alias -p
</code></pre></div></div>

<p>Expressions are denoted with the following format:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo $(( 10 + 5 )) # =&gt; 15
</code></pre></div></div>

<p>Unlike other programming languages, bash is a shell so it works in the context
of a current directory. You can list files and directories in the current
directory with the ls command:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls # Lists the files and subdirectories contained in the current directory
</code></pre></div></div>

<p>This command has options that control its execution:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -l # Lists every file and directory on a separate line
ls -t # Sorts the directory contents by last-modified date (descending)
ls -R # Recursively `ls` this directory and all of its subdirectories
</code></pre></div></div>

<p>Results (stdout) of the previous command can be passed as input (stdin) to the next command
using a pipe |. Commands chained in this way are called a “pipeline”, and are run concurrently.
The <code class="language-plaintext highlighter-rouge">grep</code> command filters the input with provided patterns.
That’s how we can list .txt files in the current directory:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ls -l | grep "\.txt"
</code></pre></div></div>

<p>Use <code class="language-plaintext highlighter-rouge">cat</code> to print files to stdout:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat file.txt
</code></pre></div></div>

<p>We can also read the file using <code class="language-plaintext highlighter-rouge">cat</code>:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Contents=$(cat file.txt)
</code></pre></div></div>

<p>“\n” prints a new line character
“-e” to interpret the newline escape characters as escape characters</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo -e "START OF FILE\n$Contents\nEND OF FILE"
</code></pre></div></div>

<p>=&gt; START OF FILE
=&gt; [contents of file.txt]
=&gt; END OF FILE</p>

<p>Use <code class="language-plaintext highlighter-rouge">cp</code> to copy files or directories from one place to another.
<code class="language-plaintext highlighter-rouge">cp</code> creates NEW versions of the sources,
so editing the copy won’t affect the original (and vice versa).
Note that it will overwrite the destination if it already exists.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cp srcFile.txt clone.txt
cp -r srcDirectory/ dst/ # recursively copy
</code></pre></div></div>

<p>Look into <code class="language-plaintext highlighter-rouge">scp</code> or <code class="language-plaintext highlighter-rouge">sftp</code> if you plan on exchanging files between computers.
<code class="language-plaintext highlighter-rouge">scp</code> behaves very similarly to <code class="language-plaintext highlighter-rouge">cp</code>.
<code class="language-plaintext highlighter-rouge">sftp</code> is more interactive.</p>

<p>Use <code class="language-plaintext highlighter-rouge">mv</code> to move files or directories from one place to another.
<code class="language-plaintext highlighter-rouge">mv</code> is similar to <code class="language-plaintext highlighter-rouge">cp</code>, but it deletes the source.
<code class="language-plaintext highlighter-rouge">mv</code> is also useful for renaming files!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mv source.txt dst.txt # sorry, l33t hackers...
</code></pre></div></div>

<p>Since bash works in the context of a current directory, you might want to
run your command in some other directory. We have cd for changing location:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cd ~    # change to home directory
cd      # also goes to home directory
cd ..   # go up one directory
        # (^^say, from /home/username/Downloads to /home/username)
cd /home/username/Documents   # change to specified directory
cd ~/Documents/..    # now in home directory (if ~/Documents exists)
cd -    # change to last directory
</code></pre></div></div>

<p>=&gt; /home/username/Documents</p>

<p>Use subshells to work across directories</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(echo "First, I'm here: $PWD") &amp;&amp; (cd someDir; echo "Then, I'm here: $PWD")
pwd # still in first directory
</code></pre></div></div>

<p>Use <code class="language-plaintext highlighter-rouge">mkdir</code> to create new directories.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir myNewDir
</code></pre></div></div>

<p>The <code class="language-plaintext highlighter-rouge">-p</code> flag causes new intermediate directories to be created as necessary.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>mkdir -p myNewDir/with/intermediate/directories
</code></pre></div></div>

<p>if the intermediate directories didn’t already exist, running the above
command without the <code class="language-plaintext highlighter-rouge">-p</code> flag would return an error</p>

<p>You can redirect command input and output (stdin, stdout, and stderr)
using “redirection operators”. Unlike a pipe, which passes output to a command,
a redirection operator has a command’s input come from a file or stream, or
sends its output to a file or stream.</p>

<p>Read from stdin until ^EOF$ and overwrite hello.py with the lines
between “EOF” (which are called a “here document”):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat &gt; hello.py &lt;&lt; EOF
#!/usr/bin/env python
from __future__ import print_function
import sys
print("#stdout", file=sys.stdout)
print("#stderr", file=sys.stderr)
for line in sys.stdin:
    print(line, file=sys.stdout)
EOF
</code></pre></div></div>]]></content><author><name>Richard Van</name></author><category term="bash" /></entry><entry><title type="html">Git</title><link href="http://localhost:4000/2023/01/git.html" rel="alternate" type="text/html" title="Git" /><published>2023-01-01T00:00:00-06:00</published><updated>2023-01-01T00:00:00-06:00</updated><id>http://localhost:4000/2023/01/git</id><content type="html" xml:base="http://localhost:4000/2023/01/git.html"><![CDATA[<h2 id="init">init</h2>
<p>Create an empty Git repository. The Git repository’s settings, stored information, and more is stored in a directory (a folder) named <code class="language-plaintext highlighter-rouge">git</code>.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git init
</code></pre></div></div>

<h2 id="config">config</h2>

<p>To configure settings. Whether it be for the repository, the system itself, or global configurations ( global config file is ~/.gitconfig ).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ git config --global user.email "MyEmail@Zoho.com"
$ git config --global user.name "My Name"

$ git config --global user.email
$ git config --global user.name
</code></pre></div></div>

<h2 id="add">add</h2>
<p>To add files to the staging area/index. If you do not git add new files to the staging area/index, they will not be included in commits!</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># add a file in your current working directory
$ git add HelloWorld.java

# add a file in a nested dir
$ git add /path/to/file/HelloWorld.c

# Regular Expression support!
$ git add ./*.java

# You can also add everything in your working directory to the staging area.
$ git add -A
</code></pre></div></div>

<h2 id="branch">branch</h2>
<p>Manage your branches. You can view, edit, create, delete branches using this command.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># list existing branches &amp; remotes
$ git branch -a

# create a new branch
$ git branch myNewBranch

# delete a branch
$ git branch -d myBranch

# rename a branch
# git branch -m &lt;oldname&gt; &lt;newname&gt;
$ git branch -m myBranchName myNewBranchName

# edit a branch's description
$ git branch myBranchName --edit-description
</code></pre></div></div>

<h2 id="checkout">checkout</h2>
<p>Updates all files in the working tree to match the version in the index, or specified tree.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Checkout a repo - defaults to master branch
$ git checkout

# Checkout a specified branch
$ git checkout branchName

# Create a new branch &amp; switch to it
# equivalent to "git branch &lt;name&gt;; git checkout &lt;name&gt;"

$ git checkout -b newBranch
</code></pre></div></div>

<h2 id="clone">clone</h2>
<p>Clones, or copies, an existing repository into a new directory. It also adds remote-tracking branches for each branch in the cloned repo, which allows you to push to a remote branch.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Clone learnxinyminutes-docs
$ git clone https://github.com/adambard/learnxinyminutes-docs.git

# shallow clone - faster cloning that pulls only latest snapshot
$ git clone --depth 1 https://github.com/adambard/learnxinyminutes-docs.git

# clone only a specific branch
$ git clone -b master-cn https://github.com/adambard/learnxinyminutes-docs.git --single-branch
</code></pre></div></div>

<h2 id="commit">commit</h2>
<p>Stores the current contents of the index in a new “commit.” This commit contains the changes made and a message created by the user.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># commit with a message
$ git commit -m "Added multiplyNumbers() function to HelloWorld.c"

# signed commit with a message (user.signingkey must have been set
# with your GPG key e.g. git config --global user.signingkey 5173AAD5)
$ git commit -S -m "signed commit message"

# automatically stage modified or deleted files, except new files, and then commit
$ git commit -a -m "Modified foo.php and removed bar.php"

# change last commit (this deletes previous commit with a fresh commit)
$ git commit --amend -m "Correct message"
</code></pre></div></div>

<h2 id="pull">pull</h2>
<p>Pulls from a repository and merges it with another branch.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Update your local repo, by merging in new changes
# from the remote "origin" and "master" branch.
# git pull &lt;remote&gt; &lt;branch&gt;
$ git pull origin master

# By default, git pull will update your current branch
# by merging in new changes from its remote-tracking branch
$ git pull

# Merge in changes from remote branch and rebase
# branch commits onto your local repo, like: "git fetch &lt;remote&gt; &lt;branch&gt;, git
# rebase &lt;remote&gt;/&lt;branch&gt;"
$ git pull origin master --rebase
</code></pre></div></div>

<h2 id="push">push</h2>
<p>Push and merge changes from a branch to a remote &amp; branch.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># Push and merge changes from a local repo to a
# remote named "origin" and "master" branch.
# git push &lt;remote&gt; &lt;branch&gt;
$ git push origin master

# By default, git push will push and merge changes from
# the current branch to its remote-tracking branch
$ git push

# To link up current local branch with a remote branch, add -u flag:
$ git push -u origin master
# Now, anytime you want to push from that same local branch, use shortcut:
$ git push
</code></pre></div></div>]]></content><author><name>Richard Van</name></author><category term="git" /></entry><entry><title type="html">Python</title><link href="http://localhost:4000/2023/01/python.html" rel="alternate" type="text/html" title="Python" /><published>2023-01-01T00:00:00-06:00</published><updated>2023-01-01T00:00:00-06:00</updated><id>http://localhost:4000/2023/01/python</id><content type="html" xml:base="http://localhost:4000/2023/01/python.html"><![CDATA[<p>In the future, you may come into the problem of needing multiple version of Python or Python Library. By installing Anaconda (or miniconda/miniforge) you will save yourself from a major headache.</p>

<p>In short:</p>
<ul>
  <li>Anaconda is a open-source package manager for coding with Python.</li>
  <li>Miniconda is the minimal installer of Anaconda.</li>
  <li>Miniforge is the community driven version of Miniconda.
<br /></li>
</ul>

<p><em>This tutorial will focus on installing Miniforge.</em></p>

<ol>
<li> First it is always helpful to have a dedicated "Programs/" folder if you don't already have one.</li>


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mkdir</span> <span class="no">Programs</span> 
<span class="n">cd</span> <span class="no">Programs</span></code></pre></figure>


<li>Clone the miniforge repository for your OS from GitHub.</li> 


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">git</span> <span class="nb">clone</span> <span class="n">https</span><span class="ss">:/</span><span class="o">/</span><span class="n">github</span><span class="p">.</span><span class="nf">com</span><span class="o">/</span><span class="n">conda</span><span class="o">-</span><span class="n">forge</span><span class="o">/</span><span class="n">miniforge</span><span class="o">/</span><span class="n">releases</span><span class="o">/</span><span class="n">latest</span><span class="o">/</span><span class="n">download</span><span class="o">/</span><span class="no">Miniforge3</span><span class="o">-&lt;</span><span class="no">YOUR</span><span class="o">-</span><span class="no">OS</span><span class="o">&gt;</span><span class="p">.</span><span class="nf">sh</span></code></pre></figure>


<li>Now that the file is downloaded, run the installaton script and follow the instructions until you reach the question on installation location.</li>


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">bash</span> <span class="no">Miniforge3</span><span class="o">-&lt;</span><span class="no">YOUR</span><span class="o">-</span><span class="no">OS</span><span class="o">&gt;</span><span class="p">.</span><span class="nf">sh</span> 
<span class="sr">/home/</span><span class="o">&lt;</span><span class="n">username</span><span class="o">&gt;</span><span class="sr">/Programs/mini</span><span class="n">forge3</span> <span class="c1"># We want to install Miniconda here</span></code></pre></figure>


<li>When all is done, Conda will ask you to intialize</li>


<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">conda</span> <span class="n">init</span></code></pre></figure>


</ol>

<h3 id="table-of-contents">Table of Contents</h3>

<ol>
  <li><a href="#conda-commands">Conda Commands</a></li>
  <li><a href="#example-with-ambertools">Example with AmberTools</a></li>
</ol>

<h3 id="conda-commands">Conda Commands</h3>

<p>Creating a new virtual environment.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create -n &lt;name&gt;                          # Create New environment
conda create -n &lt;name&gt; python=&lt;version-number&gt;  # Specific Python version
</code></pre></div></div>
<p><br />
Running the new environment.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate &lt;name&gt;
</code></pre></div></div>
<p><br />
In your new activated environment, you can now install needed packages.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda install &lt;package-name&gt;                 # Install Package
conda install -c conda-forge &lt;package-name&gt;  # Install package from a specific channel (-c)
</code></pre></div></div>
<p><br />
To leave a virutal environment.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda deactivate
</code></pre></div></div>
<p><br />
Deleting conda environments and related packages.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda env remove -n &lt;name&gt;
</code></pre></div></div>
<p><br />
List available environments.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda env list
</code></pre></div></div>
<p><br />
List packages within an environment.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate &lt;name&gt;
conda list
</code></pre></div></div>
<p><br />
Exporting environments to a YML file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda activate &lt;name&gt;
conda env export &gt; &lt;name&gt;.yml
</code></pre></div></div>
<p><br />
Installing a Conda environment from a YML file.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>codna env create -f &lt;name&gt;.yml
</code></pre></div></div>
<p><br /></p>

<h3 id="example-with-ambertools">Example with AmberTools</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>conda create -n ambertools
conda activate ambertools
conda install -c conda-forge ambertools=22 compilers
</code></pre></div></div>]]></content><author><name>Richard Van</name></author><category term="python" /></entry><entry><title type="html">Slurm</title><link href="http://localhost:4000/2023/01/slurm.html" rel="alternate" type="text/html" title="Slurm" /><published>2023-01-01T00:00:00-06:00</published><updated>2023-01-01T00:00:00-06:00</updated><id>http://localhost:4000/2023/01/slurm</id><content type="html" xml:base="http://localhost:4000/2023/01/slurm.html"><![CDATA[<p>Examples shown below references the OSCER Supercomputer at the University of Oklahoma. However, this similar commands can be used for other supercomputers with minor adjustments.</p>

<p>NOTE: Change <code class="language-plaintext highlighter-rouge">&lt;username&gt;</code> with your supercomputing account name.</p>

<h2 id="table-of-content">Table of Content</h2>

<ol>
  <li><a href="#Login">Login</a></li>
  <li><a href="#Submitting-Jobs">Submitting Jobs</a></li>
  <li><a href="#checking-slurm-queue">SLURM Queue</a></li>
  <li><a href="#get-node-information">Node Information</a></li>
  <li><a href="#download-filesfolders">Download Files/Folders</a></li>
  <li><a href="#uploading-filesfolders">Upload Files/Folders</a></li>
</ol>

<h2 id="login">Login</h2>

<p>OSCER has 2 login nodes, if you don’t specify which of the two, then it will automatically chose on for you.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh &lt;username&gt;@schooner.oscer.ou.edu    # Auto
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh &lt;username&gt;@schooner1.oscer.ou.edu   # Login Node 1
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh &lt;username&gt;@schooner2.oscer.ou.edu   # Login Node 2
</code></pre></div></div>
<p><br /></p>

<h2 id="submitting-jobs">Submitting Jobs</h2>

<p>To submit jobs to the SLURM scheduler, use <code class="language-plaintext highlighter-rouge">sbatch</code> followed by the name of your batch script.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sbatch script.slurm
</code></pre></div></div>
<p><br /></p>

<h3 id="slurm-flags">SLURM flags</h3>

<table>
  <thead>
    <tr>
      <th style="text-align: left">Option</th>
      <th style="text-align: left">Meaning</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">--partition=NAME</td>
      <td style="text-align: left">Job to run on partition “NAME”</td>
    </tr>
    <tr>
      <td style="text-align: left">--time=HH:MM:SS</td>
      <td style="text-align: left">Amount of wall time requested for job (Hours:Minutes:Seconds)</td>
    </tr>
    <tr>
      <td style="text-align: left">--nodes=#</td>
      <td style="text-align: left">Number of nodes to use</td>
    </tr>
    <tr>
      <td style="text-align: left">--ntasks=#</td>
      <td style="text-align: left">Number of tasks (processors) to be run</td>
    </tr>
    <tr>
      <td style="text-align: left">--cpus-per-task=#</td>
      <td style="text-align: left">Number of CPUs required for each task (e.g. ‘8’ for an 8-way multithreaded job)</td>
    </tr>
    <tr>
      <td style="text-align: left">--ntasks-per-core=1</td>
      <td style="text-align: left">Do not use hyperthreading (this flag typically used for parallel jobs)</td>
    </tr>
    <tr>
      <td style="text-align: left">--mem=#g</td>
      <td style="text-align: left">Memory required for the job (Note the g (GB) in this option)</td>
    </tr>
    <tr>
      <td style="text-align: left">--exclusive</td>
      <td style="text-align: left">Allocate the node exclusively</td>
    </tr>
    <tr>
      <td style="text-align: left">--error=%j.err</td>
      <td style="text-align: left">JOBID as name of stderr file (by default, slurm######.out in the submitting directory)</td>
    </tr>
    <tr>
      <td style="text-align: left">--output=%j.out</td>
      <td style="text-align: left">JOBID as name of stdout file (by default, slurm######.out in the submitting directory)</td>
    </tr>
    <tr>
      <td style="text-align: left">--job-name=NAME</td>
      <td style="text-align: left">Name your job, “NAME”, so you can identify it in the queue</td>
    </tr>
    <tr>
      <td style="text-align: left">--array=0-#</td>
      <td style="text-align: left">Mechanism for submitting and managing similar jobs (# can be index values)</td>
    </tr>
  </tbody>
</table>

<h3 id="example">Example</h3>

<p>Example of debug batch script.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/bash
#SBATCH --partition=debug
#SBATCH --nodes=1
#SBATCH --ntasks=1
#SBATCH --mem=1g
#SBATCH --output=%j.out
#SBATCH --error=%j.err
#SBATCH --time=00:05:00
#SBATCH --job-name=example
</code></pre></div></div>
<p><br /></p>

<h2 id="checking-slurm-queue">Checking SLURM queue</h2>

<p>Shows all jobs running/pending in queue.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>squeue 
</code></pre></div></div>
<p><br />
Show <em>your</em> jobs that are running/pending in queue.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>squeue -u &lt;username&gt; 
</code></pre></div></div>
<p><br />
Find running/pending jobs for a specific partition.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>squeue -p &lt;ParitionName&gt;
</code></pre></div></div>
<p><br /></p>

<h2 id="get-node-information">Get Node information</h2>

<p>List nodes.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sinfo
</code></pre></div></div>
<p><br />
Find all available nodes.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sinfo | grep "idle"
</code></pre></div></div>
<p><br />
Find information on why a specific node is down</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>sinfo -R
</code></pre></div></div>
<p><br /></p>

<h2 id="download-filesfolders">Download Files/Folders</h2>

<p>There are 2 options to downloading files and folders.</p>

<ol>
  <li>Download with <code class="language-plaintext highlighter-rouge">scp</code> (Good for small and/or few files/folders)
    <ul>
      <li>For files, you will need to be in a second terminal where the <em>working directory is on your local computer</em> and where you want the file to be located</li>
      <li>For Folders, follow the previous step, and add the flag <code class="language-plaintext highlighter-rouge">scp -r</code>.</li>
    </ul>
  </li>
  <li>Download with <code class="language-plaintext highlighter-rouge">rsync</code> (For copying large amounts of data, and generally the preferred approach).
    <ul>
      <li>If a lot of data needs to be transfered it is also preferred to use the data transfer login node on OSCER (dtn2.oscer.ou.edu).</li>
      <li>Same approach as <code class="language-plaintext highlighter-rouge">scp</code> but use the flags <code class="language-plaintext highlighter-rouge">rsync -avuim</code>.</li>
      <li><code class="language-plaintext highlighter-rouge">-a</code> archive - preserve as most of the data.</li>
      <li><code class="language-plaintext highlighter-rouge">-v</code> verbose - print summary of file transfer.</li>
      <li><code class="language-plaintext highlighter-rouge">-u</code> update - only newest file will be kept.</li>
      <li><code class="language-plaintext highlighter-rouge">-i</code> itemize - list of the changes.</li>
      <li><code class="language-plaintext highlighter-rouge">-m</code> prune - delete empty folders.</li>
    </ul>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp &lt;username&gt;@schooner.oscer.ou.edu:/path/to/file .               # File Download
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp &lt;username&gt;@schooner.oscer.ou.edu:/path/to/directory .          # Folder Download
</code></pre></div></div>
<p><br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync -avuim &lt;username&gt;@dtn2.oscer.ou.edu:/path/to/file .      # File Download
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync -avuim &lt;username&gt;@dtn2.oscer.ou.edu:/path/to/directory . # Folder Download
</code></pre></div></div>
<p><br /></p>

<h2 id="uploading-filesfolders">Uploading Files/Folders</h2>

<p>The commands <code class="language-plaintext highlighter-rouge">scp</code> and <code class="language-plaintext highlighter-rouge">rsync</code> also uploads files and folders, just switch the [source] and [destination].</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp file &lt;username&gt;@schooner.oscer.ou.edu:/path/to/file                  # File Upload
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>scp directory &lt;username&gt;@schooner.oscer.ou.edu:/path/to/directory        # Folder Upload
</code></pre></div></div>
<p><br /></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync -avuim file &lt;username&gt;@dtn2.oscer.ou.edu:/path/to/file         # File Upload
</code></pre></div></div>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>rsync -avuim folder &lt;username&gt;@dtn2.oscer.ou.edu:/path/to/directory  # Folder Upload
</code></pre></div></div>
<p><br /></p>

<p>Examples shown below references the OSCER Supercomputer at the University of Oklahoma. However, this similar commands can be used for other supercomputers with minor adjustments.</p>

<h2 id="linuxmac">Linux/Mac</h2>

<p>If your OS is Linux/Mac, login is straight forward (<code class="language-plaintext highlighter-rouge">&lt;username&gt;</code> is your username):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh &lt;username&gt;@schooner.oscer.ou.edu 
</code></pre></div></div>
<p><br /></p>

<h3 id="login-with-no-password">Login with no password</h3>

<p>On your computer, run the following:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh-keygen -t rsa -b 4096
</code></pre></div></div>
<p><br /></p>

<p><strong>NOTE:</strong> Do not set a passphrase when creating the key (Press enter 3 times). Make sure that this file is only readable by you! The public key file (id_dsa.pub or id_rsa.pub) as the name implies can be uploaded to other systems to which you would like passwordless access.</p>

<p>Now, create a <code class="language-plaintext highlighter-rouge">~/.ssh</code> directory on the cluster (doesn’t matter if this is already there).</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>ssh &lt;username&gt;@schooner.oscer.ou.edu mkdir -p .ssh
</code></pre></div></div>
<p><br /></p>

<p>Append the public key to the cluser and enter password one last time:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>cat .ssh/id_rsa.pub | ssh &lt;username&gt;@schooner.oscer.ou.edu `cat &gt;&gt; ~/.ssh/authorized_keys`
</code></pre></div></div>
<p><br /></p>

<h2 id="windows">Windows</h2>

<p>If your OS is Windows and you need to SSH to a remote server, you have 2 options:</p>

<ol>
  <li>SSH with Windows Powershell (<strong>REQ:</strong> Windows 10, Powershell 5.1+, Adminstrative Access).</li>
  <li>SSH with PuTTy.</li>
</ol>

<h3 id="ssh-with-windows-powershell">SSH with Windows Powershell</h3>

<p><strong>Prerequsite Checklist</strong></p>

<p>Open Powershell and Run as Administrator.</p>

<p>Run winver.exe and press enter to see the version details for your Windows device.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ winver.exe
</code></pre></div></div>
<p><br />
Run $PSVersionTable.PSVersion. Verify your major version is at least 5, and your minor version at least 1. Learn more about installing PowerShell on Windows.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ PSVersionTable.PSVersion
</code></pre></div></div>
<p><br />
Run the command below. The output will show True when you’re a member of the built-in Administrators group.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$ (New-Object Security.Principal.WindowsPrincipal([Security.Principal.WindowsIdentity]::GetCurrent())).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
</code></pre></div></div>
<p><br /></p>]]></content><author><name>Richard Van</name></author><category term="slurm" /></entry></feed>